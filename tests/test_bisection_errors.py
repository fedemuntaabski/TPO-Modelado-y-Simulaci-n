"""
Demostraci√≥n de la diferencia entre Error y Error Absoluto en Bisecci√≥n
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.core.root_finding import RootFinder, create_function_from_string

def demo_bisection_errors():
    """Demuestra la diferencia entre error y error absoluto"""
    
    print("="*80)
    print("DEMOSTRACI√ìN: ERROR vs ERROR ABSOLUTO EN BISECCI√ìN")
    print("="*80)
    
    # Funci√≥n ejemplo: x¬≤ - 4 = 0 (ra√≠z exacta en x = 2)
    f = create_function_from_string("x**2 - 4")
    solver = RootFinder(tolerance=1e-6, max_iterations=20)
    
    print("Funci√≥n: f(x) = x¬≤ - 4")
    print("Ra√≠z exacta: x = 2.0")
    print("Intervalo inicial: [1, 3]")
    print("Tolerancia: 1e-6")
    
    result = solver.bisection_method(f, 1.0, 3.0)
    
    print(f"\nRESULTADO FINAL:")
    print(f"Ra√≠z encontrada: {result.root:.8f}")
    print(f"Error final: {result.error:.8f}")
    print(f"Iteraciones: {result.iterations}")
    print(f"Convergi√≥: {result.converged}")
    
    print(f"\n{'Iter':<4} {'a':<10} {'b':<10} {'c (aprox)':<12} {'f(c)':<12} {'Error':<12} {'Error Real':<12} {'Criterio'}")
    print("-" * 95)
    
    for i, data in enumerate(result.iteration_data):
        iter_num = data['iteration']
        a = data['a']
        b = data['b']
        c = data['c']
        fc = data['f_c']
        error_intervalo = data['error']
        
        # Error real (distancia a la ra√≠z verdadera x=2)
        error_real = abs(c - 2.0)
        
        # Determinar qu√© criterio se usa para parar
        if abs(fc) < 1e-6:
            criterio = "f(c) peque√±o"
        elif error_intervalo < 1e-6:
            criterio = "intervalo peque√±o"
        else:
            criterio = "contin√∫a"
        
        print(f"{iter_num:<4} {a:<10.6f} {b:<10.6f} {c:<12.8f} {fc:<12.6f} {error_intervalo:<12.8f} {error_real:<12.8f} {criterio}")
        
        # Parar si cumple criterio (simular la l√≥gica del algoritmo)
        if abs(fc) < 1e-6 or error_intervalo < 1e-6:
            print(f"\n‚úÖ CONVERGENCIA en iteraci√≥n {iter_num}:")
            if abs(fc) < 1e-6:
                print(f"   - |f(c)| = {abs(fc):.2e} < tolerancia")
            if error_intervalo < 1e-6:
                print(f"   - Error de intervalo = {error_intervalo:.2e} < tolerancia")
            break
    
    print(f"\n" + "="*80)
    print("AN√ÅLISIS DE LOS ERRORES")
    print("="*80)
    
    print(f"üìä TIPOS DE ERROR:")
    print(f"   ‚Ä¢ Error de Intervalo: (b-a)/2 = {result.error:.8f}")
    print(f"   ‚Ä¢ Error Real: |c - ra√≠z_exacta| = {abs(result.root - 2.0):.8f}")
    print(f"   ‚Ä¢ Valor funci√≥n: |f(c)| = {abs(result.function_value):.8f}")
    
    print(f"\nüéØ CRITERIOS DE PARADA:")
    print(f"   ‚Ä¢ El programa para cuando: |f(c)| < tolerancia OR (b-a)/2 < tolerancia")
    print(f"   ‚Ä¢ En este caso par√≥ por: {'f(c) peque√±o' if abs(result.function_value) < 1e-6 else 'intervalo peque√±o'}")
    
    print(f"\n‚úÖ GARANT√çAS DEL M√âTODO:")
    print(f"   ‚Ä¢ La ra√≠z est√° GARANTIZADA en el intervalo final")
    print(f"   ‚Ä¢ Error de intervalo es una COTA SUPERIOR del error real")
    print(f"   ‚Ä¢ El error real ({abs(result.root - 2.0):.8f}) ‚â§ Error de intervalo ({result.error:.8f})")
    
    print(f"\nüìà CONVERGENCIA:")
    print(f"   ‚Ä¢ Bisecci√≥n tiene convergencia lineal")
    print(f"   ‚Ä¢ El intervalo se reduce a la mitad en cada iteraci√≥n")
    print(f"   ‚Ä¢ Error garantizado ‚â§ (intervalo_inicial) / 2^n")

if __name__ == "__main__":
    demo_bisection_errors()