"""
Test para demostrar exactamente lo que aparece en la interfaz gr√°fica
del m√©todo de Aitken con ejemplos pr√°cticos
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.core.root_finding import RootFinder, create_function_from_string
from src.ui.components.mixins import format_decimal_number
import math

def demonstrate_aitken_ui_display():
    """Demuestra exactamente lo que se muestra en la UI"""
    
    print("="*80)
    print("DEMOSTRACI√ìN: LO QUE VE EL USUARIO EN LA INTERFAZ GR√ÅFICA")
    print("="*80)
    
    # Ejemplo 1: Funci√≥n t√≠pica que converge
    print("\nüìã EJEMPLO 1: Funci√≥n g(x) = cos(x)")
    print("   Encuentra el punto fijo donde x = cos(x)")
    print("   Valor inicial: x‚ÇÄ = 0.5")
    print("   Tolerancia: 1e-6")
    
    g1 = create_function_from_string("cos(x)")
    solver = RootFinder(tolerance=1e-6, max_iterations=10)
    result1 = solver.aitken_acceleration(g1, 0.5)
    
    print(f"\n   Resultado final: {format_decimal_number(result1.root, 8)}")
    print(f"   Error: {format_decimal_number(result1.error, 8)}")
    print(f"   Iteraciones: {result1.iterations}")
    print(f"   {'Convergi√≥' if result1.converged else 'No convergi√≥'}")
    
    # Tabla como aparece en la UI
    print(f"\n   TABLA DE ITERACIONES (como aparece en pantalla):")
    print(f"   {'Iter':<4} {'x':<15} {'x‚ÇÅ':<15} {'x‚ÇÇ':<15} {'x_aitken':<17} {'Error':<15}")
    print(f"   {'-'*85}")
    
    for data in result1.iteration_data:
        iter_num = data['iteration']
        x = format_decimal_number(data['x'], 8)
        x1 = format_decimal_number(data['x1'], 8)
        x2 = format_decimal_number(data['x2'], 8)
        x_aitken = format_decimal_number(data['x_aitken'], 8)
        error = format_decimal_number(data['error'], 8)
        
        print(f"   {iter_num:<4} {x:<15} {x1:<15} {x2:<15} {x_aitken:<17} {error:<15}")
    
    # Ejemplo 2: Proporci√≥n √°urea
    print(f"\n\nüìã EJEMPLO 2: Funci√≥n g(x) = ‚àö(x + 1)")
    print("   Encuentra la proporci√≥n √°urea œÜ = (1 + ‚àö5)/2 ‚âà 1.618034")
    print("   Valor inicial: x‚ÇÄ = 1.0")
    print("   Tolerancia: 1e-8")
    
    g2 = create_function_from_string("sqrt(x + 1)")
    solver2 = RootFinder(tolerance=1e-8, max_iterations=8)
    result2 = solver2.aitken_acceleration(g2, 1.0)
    
    print(f"\n   Resultado final: {format_decimal_number(result2.root, 10)}")
    print(f"   Error: {format_decimal_number(result2.error, 10)}")
    print(f"   Iteraciones: {result2.iterations}")
    print(f"   {'Convergi√≥' if result2.converged else 'No convergi√≥'}")
    
    # Valor te√≥rico de la proporci√≥n √°urea
    golden_ratio = (1 + math.sqrt(5)) / 2
    actual_error = abs(result2.root - golden_ratio)
    print(f"   Error real vs œÜ te√≥rico: {format_decimal_number(actual_error, 10)}")
    
    print(f"\n   TABLA DE ITERACIONES:")
    print(f"   {'Iter':<4} {'x':<17} {'x‚ÇÅ':<17} {'x‚ÇÇ':<17} {'x_aitken':<19} {'Error':<17}")
    print(f"   {'-'*95}")
    
    for data in result2.iteration_data:
        iter_num = data['iteration']
        x = format_decimal_number(data['x'], 10)
        x1 = format_decimal_number(data['x1'], 10)
        x2 = format_decimal_number(data['x2'], 10)
        x_aitken = format_decimal_number(data['x_aitken'], 10)
        error = format_decimal_number(data['error'], 10)
        
        print(f"   {iter_num:<4} {x:<17} {x1:<17} {x2:<17} {x_aitken:<19} {error:<17}")

def explain_aitken_columns():
    """Explica qu√© significa cada columna en la tabla"""
    
    print(f"\n\n" + "="*80)
    print("EXPLICACI√ìN DE LAS COLUMNAS EN LA TABLA DE AITKEN")
    print("="*80)
    
    explanations = [
        ("Iter", "N√∫mero de iteraci√≥n del proceso"),
        ("x", "Valor x‚ÇÄ usado en esta iteraci√≥n"),
        ("x‚ÇÅ", "Primer punto fijo: x‚ÇÅ = g(x‚ÇÄ)"),
        ("x‚ÇÇ", "Segundo punto fijo: x‚ÇÇ = g(x‚ÇÅ)"),
        ("x_aitken", "Valor acelerado usando la f√≥rmula de Aitken"),
        ("Error", "Diferencia |x_aitken - x| de esta iteraci√≥n")
    ]
    
    print(f"{'Columna':<12} {'Significado'}")
    print(f"{'-'*50}")
    for col, meaning in explanations:
        print(f"{col:<12} {meaning}")
    
    print(f"\nüìê F√ìRMULA DE AITKEN:")
    print(f"   x_new = x - (x‚ÇÅ - x)¬≤ / (x‚ÇÇ - 2x‚ÇÅ + x)")
    print(f"   donde:")
    print(f"   ‚Ä¢ x = punto inicial")
    print(f"   ‚Ä¢ x‚ÇÅ = g(x)")
    print(f"   ‚Ä¢ x‚ÇÇ = g(x‚ÇÅ)")
    print(f"   ‚Ä¢ Esta f√≥rmula 'acelera' la convergencia hacia el punto fijo")

def demonstrate_aitken_benefits():
    """Demuestra los beneficios del m√©todo de Aitken"""
    
    print(f"\n\n" + "="*80)
    print("BENEFICIOS DEL M√âTODO DE AITKEN")
    print("="*80)
    
    # Comparaci√≥n lado a lado
    g = create_function_from_string("cos(x)")
    
    # Punto fijo normal
    solver_normal = RootFinder(tolerance=1e-6, max_iterations=50)
    result_normal = solver_normal.fixed_point_method(g, 0.5)
    
    # Aitken
    solver_aitken = RootFinder(tolerance=1e-6, max_iterations=10)
    result_aitken = solver_aitken.aitken_acceleration(g, 0.5)
    
    print(f"üîÑ PUNTO FIJO NORMAL:")
    print(f"   Iteraciones necesarias: {result_normal.iterations}")
    print(f"   Error final: {format_decimal_number(result_normal.error, 8)}")
    print(f"   Resultado: {format_decimal_number(result_normal.root, 8)}")
    
    print(f"\nüöÄ ACELERACI√ìN DE AITKEN:")
    print(f"   Iteraciones necesarias: {result_aitken.iterations}")
    print(f"   Error final: {format_decimal_number(result_aitken.error, 8)}")
    print(f"   Resultado: {format_decimal_number(result_aitken.root, 8)}")
    
    if result_aitken.iterations > 0 and result_normal.iterations > 0:
        speedup = result_normal.iterations / result_aitken.iterations
        print(f"\nüí° MEJORA: {speedup:.1f}x m√°s r√°pido")
        print(f"   (Reduce de {result_normal.iterations} a {result_aitken.iterations} iteraciones)")

if __name__ == "__main__":
    demonstrate_aitken_ui_display()
    explain_aitken_columns()
    demonstrate_aitken_benefits()
    
    print(f"\n\n" + "="*80)
    print("‚úÖ CONCLUSI√ìN")
    print("="*80)
    print("El m√©todo de Aitken est√° correctamente implementado y muestra:")
    print("‚Ä¢ ‚úì F√≥rmula matem√°tica correcta")
    print("‚Ä¢ ‚úì Datos coherentes en pantalla")
    print("‚Ä¢ ‚úì Aceleraci√≥n significativa de convergencia")
    print("‚Ä¢ ‚úì Formato decimal legible (sin notaci√≥n cient√≠fica)")
    print("‚Ä¢ ‚úì Manejo robusto de casos extremos")
    print("="*80)