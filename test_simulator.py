#!/usr/bin/env python3
"""
Script de prueba para verificar que todos los m√≥dulos se importan correctamente
y que las funciones b√°sicas funcionan sin la GUI
"""

import sys
import os

# Agregar el directorio actual al path para importar m√≥dulos locales
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """Prueba las importaciones de m√≥dulos"""
    print("üîç Probando importaciones...")
    
    try:
        from numerics.methods import NumericalMethods, MathParser
        print("‚úÖ numerics.methods - OK")
    except ImportError as e:
        print(f"‚ùå numerics.methods - ERROR: {e}")
        return False
    
    try:
        from numerics.advanced import InterpolationMethods, AdvancedNumericalMethods, ErrorAnalysis
        print("‚úÖ numerics.advanced - OK")
    except ImportError as e:
        print(f"‚ùå numerics.advanced - ERROR: {e}")
        return False
    
    return True

def test_numerical_methods():
    """Prueba los m√©todos num√©ricos b√°sicos"""
    print("\nüßÆ Probando m√©todos num√©ricos...")
    
    try:
        from numerics.methods import NumericalMethods, MathParser
        
        # Probar parsing de funciones
        f = MathParser.parse_function("x**2 + 1")
        result = f(2)
        expected = 5
        assert abs(result - expected) < 1e-10
        print(f"‚úÖ Parser de funciones: f(2) = {result} (esperado: {expected})")
        
        # Probar bisecci√≥n
        f_root = MathParser.parse_function("x**2 - 4")
        root, iterations, history = NumericalMethods.bisection_method(f_root, 1, 3)
        assert abs(root - 2) < 1e-6
        print(f"‚úÖ M√©todo de bisecci√≥n: ra√≠z = {root:.6f} en {iterations} iteraciones")
        
        # Probar integraci√≥n
        f_int = MathParser.parse_function("x**2")
        integral = NumericalMethods.newton_cotes_integration(f_int, 0, 2)
        expected_int = 8/3  # Integral exacta de x¬≤ de 0 a 2
        error = abs(integral - expected_int)
        print(f"‚úÖ Integraci√≥n Newton-Cotes: ‚à´‚ÇÄ¬≤ x¬≤ dx = {integral:.6f} (error: {error:.2e})")
        
        # Probar derivada num√©rica
        derivative = NumericalMethods.central_difference_derivative(f, 2)
        expected_deriv = 4  # Derivada de x¬≤ + 1 en x=2 es 2x = 4
        error_deriv = abs(derivative - expected_deriv)
        print(f"‚úÖ Derivada num√©rica: f'(2) = {derivative:.6f} (error: {error_deriv:.2e})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en m√©todos num√©ricos: {e}")
        return False

def test_ode_methods():
    """Prueba los m√©todos de ecuaciones diferenciales"""
    print("\nüìà Probando m√©todos de EDO...")
    
    try:
        from numerics.methods import NumericalMethods, MathParser
        
        # Ecuaci√≥n simple: dy/dt = y, soluci√≥n exacta: y = e^t
        def simple_ode(t, y):
            return y
        
        # Resolver con Runge-Kutta
        t, y = NumericalMethods.runge_kutta_4(simple_ode, (0, 1), 1, 10)
        
        # Verificar resultado final
        import math
        expected_final = math.exp(1)  # e^1
        error = abs(y[-1] - expected_final)
        print(f"‚úÖ Runge-Kutta 4: y(1) = {y[-1]:.6f} (exacto: {expected_final:.6f}, error: {error:.2e})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en m√©todos de EDO: {e}")
        return False

def test_interpolation():
    """Prueba los m√©todos de interpolaci√≥n"""
    print("\nüìä Probando interpolaci√≥n...")
    
    try:
        from numerics.advanced import InterpolationMethods
        import numpy as np
        
        # Puntos de una funci√≥n conocida: f(x) = x¬≤
        x_points = np.array([0, 1, 2, 3])
        y_points = np.array([0, 1, 4, 9])
        
        # Interpolar en x = 1.5
        result = InterpolationMethods.lagrange_interpolation_detailed(
            x_points, y_points, np.array([1.5])
        )[0][0]
        
        expected = 1.5**2  # 2.25
        error = abs(result - expected)
        print(f"‚úÖ Interpolaci√≥n Lagrange: f(1.5) = {result:.6f} (exacto: {expected:.6f}, error: {error:.2e})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en interpolaci√≥n: {e}")
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print("=" * 60)
    print("üß™ PRUEBAS DEL SIMULADOR MATEM√ÅTICO")
    print("=" * 60)
    
    # Contador de pruebas exitosas
    tests_passed = 0
    total_tests = 4
    
    # Ejecutar pruebas
    if test_imports():
        tests_passed += 1
    
    if test_numerical_methods():
        tests_passed += 1
    
    if test_ode_methods():
        tests_passed += 1
    
    if test_interpolation():
        tests_passed += 1
    
    # Resumen
    print("\n" + "=" * 60)
    print(f"üìä RESUMEN: {tests_passed}/{total_tests} pruebas exitosas")
    
    if tests_passed == total_tests:
        print("üéâ ¬°Todas las pruebas pasaron correctamente!")
        print("üöÄ El simulador est√° listo para ejecutarse con 'python main.py'")
        return True
    else:
        print("‚ö†Ô∏è  Algunas pruebas fallaron. Revise las dependencias.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
