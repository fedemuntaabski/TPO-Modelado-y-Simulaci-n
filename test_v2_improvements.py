#!/usr/bin/env python3
"""
Pruebas espec√≠ficas para las mejoras de la versi√≥n 2.0
Verifica que todas las nuevas funcionalidades funcionan correctamente
"""

import sys
import os

# Agregar el directorio actual al path para importar m√≥dulos locales
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_theme_imports():
    """Prueba las importaciones del nuevo tema"""
    print("üé® Probando importaciones del tema...")
    
    try:
        from gui.themes import DarkTheme, AnimationUtils
        print("‚úÖ gui.themes - OK")
        
        # Probar m√©todos del tema
        stylesheet = DarkTheme.get_main_stylesheet()
        assert len(stylesheet) > 100, "Stylesheet muy corto"
        
        button_style = DarkTheme.get_button_style("primary")
        assert "background-color" in button_style, "Estilo de bot√≥n incompleto"
        
        keyboard_style = DarkTheme.get_keyboard_button_style("function")
        assert "QPushButton" in keyboard_style, "Estilo de teclado incompleto"
        
        print("‚úÖ Estilos del tema - OK")
        return True
        
    except ImportError as e:
        print(f"‚ùå gui.themes - ERROR: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error en estilos: {e}")
        return False

def test_animation_imports():
    """Prueba las importaciones de animaciones"""
    print("\n‚ú® Probando importaciones de animaciones...")
    
    try:
        from gui.animations import (
            FadeAnimation, ButtonHoverEffect, ProgressIndicator,
            SlideAnimation, PlotAnimation, StatusAnimation, LoadingSpinner
        )
        print("‚úÖ gui.animations - OK")
        
        # Probar utilidades de animaci√≥n
        from gui.themes import AnimationUtils
        duration = AnimationUtils.get_fade_duration()
        assert duration > 0, "Duraci√≥n de fade inv√°lida"
        
        hover_duration = AnimationUtils.get_hover_duration()
        assert hover_duration > 0, "Duraci√≥n de hover inv√°lida"
        
        print("‚úÖ Utilidades de animaci√≥n - OK")
        return True
        
    except ImportError as e:
        print(f"‚ùå gui.animations - ERROR: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error en animaciones: {e}")
        return False

def test_comparison_imports():
    """Prueba las importaciones de la pesta√±a de comparaci√≥n"""
    print("\nüîÑ Probando importaciones de comparaci√≥n...")
    
    try:
        from gui.comparison_tab import ComparisonTab
        print("‚úÖ gui.comparison_tab - OK")
        return True
        
    except ImportError as e:
        print(f"‚ùå gui.comparison_tab - ERROR: {e}")
        return False

def test_main_window_improvements():
    """Prueba que la ventana principal tenga las mejoras"""
    print("\nüñ•Ô∏è Probando mejoras en ventana principal...")
    
    try:
        # Verificar que no cause errores de importaci√≥n
        from gui.main_window import MathSimulatorApp, MathKeyboard
        print("‚úÖ Importaciones principales - OK")
        
        # Verificar que los m√©todos principales existan
        # (No podemos instanciar sin QApplication)
        assert hasattr(MathKeyboard, 'init_ui'), "MathKeyboard sin init_ui"
        assert hasattr(MathSimulatorApp, 'create_title_frame'), "Sin create_title_frame"
        assert hasattr(MathSimulatorApp, 'apply_style'), "Sin apply_style"
        
        print("‚úÖ M√©todos principales - OK")
        return True
        
    except ImportError as e:
        print(f"‚ùå gui.main_window - ERROR: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error en ventana principal: {e}")
        return False

def test_numerical_methods_compatibility():
    """Verifica que los m√©todos num√©ricos siguen funcionando"""
    print("\nüßÆ Verificando compatibilidad de m√©todos num√©ricos...")
    
    try:
        from numerics.methods import NumericalMethods, MathParser
        from numerics.advanced import InterpolationMethods, AdvancedNumericalMethods, ErrorAnalysis
        
        # Probar parser mejorado
        f = MathParser.parse_function("sin(x) + cos(x)")
        result = f(0)
        expected = 1.0  # sin(0) + cos(0) = 0 + 1 = 1
        assert abs(result - expected) < 1e-10, f"Parser error: {result} != {expected}"
        
        # Probar m√©todo de bisecci√≥n
        f_root = MathParser.parse_function("x**2 - 4")
        root, iterations, history = NumericalMethods.bisection_method(f_root, 1, 3, 1e-6, 100)
        assert abs(root - 2) < 1e-5, f"Bisecci√≥n error: {root} != 2"
        
        print("‚úÖ M√©todos num√©ricos compatibles - OK")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en m√©todos num√©ricos: {e}")
        return False

def test_keyboard_improvements():
    """Verifica las mejoras del teclado virtual"""
    print("\n‚å®Ô∏è Verificando mejoras del teclado virtual...")
    
    try:
        # Simular la nueva estructura del teclado
        new_buttons = [
            ['sin', 'cos', 'tan', 'Clear'],
            ['exp', 'log', 'sqrt', '+'],
            ['pi', 'e', '^', '-'],
            ['*', '/', '.', '='],
        ]
        
        # Verificar que no hay n√∫meros ni variables
        all_buttons = [btn for row in new_buttons for btn in row]
        
        # No debe haber n√∫meros
        numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
        for num in numbers:
            assert num not in all_buttons, f"N√∫mero {num} encontrado en teclado"
        
        # No debe haber variables
        variables = ['x', 't', 'y']
        for var in variables:
            assert var not in all_buttons, f"Variable {var} encontrada en teclado"
        
        # No debe haber par√©ntesis
        assert '(' not in all_buttons, "Par√©ntesis encontrado en teclado"
        assert ')' not in all_buttons, "Par√©ntesis encontrado en teclado"
        
        # Debe haber funciones matem√°ticas
        functions = ['sin', 'cos', 'tan', 'exp', 'log', 'sqrt']
        for func in functions:
            assert func in all_buttons, f"Funci√≥n {func} no encontrada en teclado"
        
        print("‚úÖ Teclado virtual mejorado - OK")
        return True
        
    except AssertionError as e:
        print(f"‚ùå Error en teclado: {e}")
        return False

def main():
    """Funci√≥n principal de pruebas v2.0"""
    print("=" * 70)
    print("üß™ PRUEBAS DEL SIMULADOR MATEM√ÅTICO v2.0")
    print("   Verificando Mejoras e Innovaciones")
    print("=" * 70)
    
    # Contador de pruebas exitosas
    tests_passed = 0
    total_tests = 6
    
    # Ejecutar pruebas espec√≠ficas de v2.0
    if test_theme_imports():
        tests_passed += 1
    
    if test_animation_imports():
        tests_passed += 1
    
    if test_comparison_imports():
        tests_passed += 1
    
    if test_main_window_improvements():
        tests_passed += 1
    
    if test_numerical_methods_compatibility():
        tests_passed += 1
        
    if test_keyboard_improvements():
        tests_passed += 1
    
    # Resumen
    print("\n" + "=" * 70)
    print(f"üìä RESUMEN v2.0: {tests_passed}/{total_tests} pruebas exitosas")
    
    if tests_passed == total_tests:
        print("üéâ ¬°Todas las mejoras funcionan correctamente!")
        print("üöÄ La versi√≥n 2.0 est√° lista para usar con 'python main_v2.py'")
        print("\n‚ú® MEJORAS VERIFICADAS:")
        print("   üé® Tema oscuro moderno")
        print("   ‚å®Ô∏è Teclado virtual simplificado")
        print("   üîÑ Pesta√±a de comparaci√≥n de m√©todos")
        print("   ‚ú® Sistema de animaciones")
        print("   üéØ Mejor experiencia de usuario")
        return True
    else:
        print("‚ö†Ô∏è  Algunas mejoras presentan problemas.")
        print("üîß Revise los errores y dependencias.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
