#!/usr/bin/env python3
"""
Simulador Matem√°tico Avanzado - Versi√≥n 3.0
Sistema integrado para m√©todos num√©ricos con interfaz gr√°fica moderna

Caracter√≠sticas:
- Interfaz PyQt6 con tema oscuro profesional
- M√©todos num√©ricos completos (ra√≠ces, integraci√≥n, EDO, etc.)
- Teclado virtual optimizado para funciones matem√°ticas
- Visualizaci√≥n avanzada y an√°lisis detallado
- Arquitectura modular y extensible

Autores: Equipo TPO Modelado y Simulaci√≥n
Fecha: 2025
Versi√≥n: 3.0
"""

import sys
import subprocess
import importlib
import logging
import os
from pathlib import Path
from typing import List, Optional

# Configuraci√≥n del logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('simulator.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# Dependencias requeridas con versiones m√≠nimas
REQUIRED_PACKAGES = {
    'PyQt6': '6.0.0',
    'numpy': '1.21.0', 
    'scipy': '1.7.0',
    'matplotlib': '3.5.0',
    'sympy': '1.9.0'
}

def show_startup_banner() -> None:
    """Muestra el banner de inicio optimizado."""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                 üßÆ An√°lisis Avanzado y Simulaci√≥n Num√©rica               ‚ïë
‚ïë                                                                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üöÄ CARACTER√çSTICAS PRINCIPALES:
   ‚ú® Interfaz PyQt6 con tema oscuro profesional
   üéØ Teclado virtual optimizado (funciones matem√°ticas)
   üìä An√°lisis detallado y visualizaci√≥n avanzada
   üîÑ Animaciones suaves y efectos visuales
   üìà Visualizaci√≥n interactiva con matplotlib
   üîß Arquitectura modular y extensible

üîß M√âTODOS DISPONIBLES:
   ‚Ä¢ B√∫squeda de ra√≠ces: Bisecci√≥n, Newton-Raphson, Secante
   ‚Ä¢ Integraci√≥n num√©rica: Trapezoidal, Simpson
   ‚Ä¢ Ecuaciones diferenciales: Euler, Runge-Kutta
   ‚Ä¢ Interpolaci√≥n: Lagrange, Newton
   ‚Ä¢ Sistemas lineales: Gauss, Jacobi, Gauss-Seidel
"""
    print(banner)

def check_and_install_dependencies() -> bool:
    """
    Verifica e instala las dependencias necesarias.
    
    Returns:
        bool: True si todas las dependencias est√°n disponibles, False si hay errores.
    """
    print("üîç Verificando dependencias del sistema...")
    logger.info("Iniciando verificaci√≥n de dependencias")
    
    missing_packages = []
    
    for package, min_version in REQUIRED_PACKAGES.items():
        try:
            if package == 'PyQt6':
                import PyQt6.QtWidgets
                logger.info(f"PyQt6 encontrado")
            else:
                module = importlib.import_module(package)
                version = getattr(module, '__version__', 'unknown')
                logger.info(f"{package} {version} encontrado")
            
            print(f"‚úÖ {package} - OK")
            
        except ImportError as e:
            missing_packages.append(package)
            print(f"‚ùå {package} - FALTANTE")
            logger.warning(f"Dependencia faltante: {package} - {e}")
    
    if missing_packages:
        print(f"\nüì¶ Instalando dependencias faltantes: {', '.join(missing_packages)}")
        
        for package in missing_packages:
            try:
                print(f"   üì• Instalando {package}...")
                subprocess.check_call([
                    sys.executable, "-m", "pip", "install", package,
                    "--quiet", "--upgrade"
                ])
                print(f"   ‚úÖ {package} instalado correctamente")
                logger.info(f"Dependencia {package} instalada exitosamente")
                
            except subprocess.CalledProcessError as e:
                print(f"   ‚ùå Error instalando {package}: {e}")
                logger.error(f"Fall√≥ la instalaci√≥n de {package}: {e}")
                return False
    
    print("‚úÖ Todas las dependencias est√°n disponibles!")
    logger.info("Verificaci√≥n de dependencias completada exitosamente")
    return True

def validate_python_version() -> bool:
    """
    Valida que la versi√≥n de Python sea compatible.
    
    Returns:
        bool: True si la versi√≥n es compatible, False en caso contrario.
    """
    min_python = (3, 8)
    current_python = sys.version_info[:2]
    
    if current_python < min_python:
        print(f"‚ùå Python {min_python[0]}.{min_python[1]}+ requerido. "
              f"Versi√≥n actual: {current_python[0]}.{current_python[1]}")
        logger.error(f"Versi√≥n de Python incompatible: {current_python}")
        return False
    
    print(f"‚úÖ Python {current_python[0]}.{current_python[1]} - Compatible")
    logger.info(f"Versi√≥n de Python validada: {current_python}")
    return True

def setup_environment() -> bool:
    """
    Configura el entorno de ejecuci√≥n.
    
    Returns:
        bool: True si el setup es exitoso, False en caso contrario.
    """
    try:
        # Verificar estructura de directorios
        required_dirs = ['gui', 'numerics']
        for dir_name in required_dirs:
            if not Path(dir_name).exists():
                logger.error(f"Directorio requerido no encontrado: {dir_name}")
                print(f"‚ùå Directorio faltante: {dir_name}")
                return False
        
        # Configurar paths
        sys.path.insert(0, str(Path(__file__).parent))
        
        # Configurar matplotlib backend
        import matplotlib
        matplotlib.use('Qt5Agg')
        
        logger.info("Entorno configurado correctamente")
        return True
        
    except Exception as e:
        logger.error(f"Error configurando entorno: {e}")
        print(f"‚ùå Error en configuraci√≥n: {e}")
        return False

def launch_application() -> int:
    """
    Lanza la aplicaci√≥n principal.
    
    Returns:
        int: C√≥digo de salida de la aplicaci√≥n.
    """
    try:
        print("üé® Inicializando interfaz gr√°fica...")
        logger.info("Iniciando aplicaci√≥n GUI")
        
        from PyQt6.QtWidgets import QApplication
        from gui.main_window import MathSimulatorApp
        
        # Crear aplicaci√≥n Qt
        app = QApplication(sys.argv)
        app.setApplicationName("Simulador Matem√°tico Avanzado")
        app.setApplicationVersion("3.0")
        app.setOrganizationName("TPO Modelado y Simulaci√≥n")
        
        # Crear y mostrar ventana principal
        main_window = MathSimulatorApp()
        main_window.show()
        
        print("üöÄ Aplicaci√≥n iniciada correctamente!")
        print("üì± Interfaz gr√°fica disponible en ventana principal")
        
        # Mostrar instrucciones de uso
        print("\n" + "="*50)
        print("INSTRUCCIONES DE USO:")
        print("‚Ä¢ Use el teclado virtual para ingresar funciones")
        print("‚Ä¢ Explore las pesta√±as para diferentes m√©todos")
        print("‚Ä¢ Utilice las herramientas de an√°lisis en cada pesta√±a")
        print("‚Ä¢ Disfrute del tema oscuro profesional")
        print("="*50)
        
        logger.info("Interfaz gr√°fica mostrada exitosamente")
        
        # Ejecutar loop principal
        return app.exec()
        
    except ImportError as e:
        logger.error(f"Error importando m√≥dulos GUI: {e}")
        print(f"‚ùå Error importando componentes: {e}")
        print("üí° Verifique que los m√≥dulos gui/ est√©n disponibles")
        return 1
        
    except Exception as e:
        logger.error(f"Error inesperado en aplicaci√≥n: {e}")
        print(f"‚ùå Error inesperado: {e}")
        return 1

def main() -> int:
    """
    Funci√≥n principal del simulador.
    
    Returns:
        int: C√≥digo de salida del programa.
    """
    try:
        # Mostrar banner de inicio
        show_startup_banner()
        
        # Validar versi√≥n de Python
        if not validate_python_version():
            return 1
        
        # Verificar e instalar dependencias
        if not check_and_install_dependencies():
            return 1
        
        # Configurar entorno
        if not setup_environment():
            return 1
        
        # Lanzar aplicaci√≥n
        return launch_application()
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Aplicaci√≥n interrumpida por el usuario")
        logger.info("Aplicaci√≥n interrumpida por KeyboardInterrupt")
        return 0
        
    except Exception as e:
        logger.error(f"Error cr√≠tico en main: {e}")
        print(f"\n‚ùå Error cr√≠tico: {e}")
        print("üìã Revise el archivo simulator.log para m√°s detalles")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
