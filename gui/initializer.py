#!/usr/bin/env python3
"""
M√≥dulo de Inicializaci√≥n - Simulador Matem√°tico Avanzado
Contiene funciones para inicializar el entorno de la aplicaci√≥n

Caracter√≠sticas:
- Verificaci√≥n e instalaci√≥n de dependencias
- Validaci√≥n de versi√≥n de Python
- Configuraci√≥n del entorno
- Banner de inicio

Autores: Equipo TPO Modelado y Simulaci√≥n
Fecha: 2025
Versi√≥n: 3.0
"""

import sys
import subprocess
import importlib
import logging
import os
from pathlib import Path
from typing import List, Optional

# Configuraci√≥n del logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('simulator.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# Dependencias requeridas con versiones m√≠nimas
REQUIRED_PACKAGES = {
    'PyQt6': '6.0.0',
    'numpy': '1.21.0',
    'scipy': '1.7.0',
    'matplotlib': '3.5.0',
    'sympy': '1.9.0'
}

def show_startup_banner() -> None:
    """Muestra el banner de inicio optimizado."""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                 üßÆ An√°lisis Avanzado y Simulaci√≥n Num√©rica               ‚ïë
‚ïë                                                                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üöÄ CARACTER√çSTICAS PRINCIPALES:
   ‚ú® Interfaz PyQt6 con tema oscuro profesional
   üéØ Teclado virtual optimizado (funciones matem√°ticas)
   üìä An√°lisis detallado y visualizaci√≥n avanzada
   üîÑ Animaciones suaves y efectos visuales
   üìà Visualizaci√≥n interactiva con matplotlib
   üîß Arquitectura modular y extensible

üîß M√âTODOS DISPONIBLES:
   ‚Ä¢ B√∫squeda de ra√≠ces: Bisecci√≥n, Newton-Raphson, Secante
   ‚Ä¢ Integraci√≥n num√©rica: Trapezoidal, Simpson
   ‚Ä¢ Ecuaciones diferenciales: Euler, Runge-Kutta
   ‚Ä¢ Interpolaci√≥n: Lagrange, Newton
   ‚Ä¢ Sistemas lineales: Gauss, Jacobi, Gauss-Seidel
"""
    print(banner)

def check_and_install_dependencies() -> bool:
    """
    Verifica e instala las dependencias necesarias.

    Returns:
        bool: True si todas las dependencias est√°n disponibles, False si hay errores.
    """
    print("üîç Verificando dependencias del sistema...")
    logger.info("Iniciando verificaci√≥n de dependencias")

    missing_packages = []

    for package, min_version in REQUIRED_PACKAGES.items():
        try:
            if package == 'PyQt6':
                import PyQt6.QtWidgets
                logger.info(f"PyQt6 encontrado")
            else:
                module = importlib.import_module(package)
                version = getattr(module, '__version__', 'unknown')
                logger.info(f"{package} {version} encontrado")

            print(f"‚úÖ {package} - OK")

        except ImportError as e:
            missing_packages.append(package)
            print(f"‚ùå {package} - FALTANTE")
            logger.warning(f"Dependencia faltante: {package} - {e}")

    if missing_packages:
        print(f"\nüì¶ Instalando dependencias faltantes: {', '.join(missing_packages)}")

        for package in missing_packages:
            try:
                print(f"   üì• Instalando {package}...")
                subprocess.check_call([
                    sys.executable, "-m", "pip", "install", package,
                    "--quiet", "--upgrade"
                ])
                print(f"   ‚úÖ {package} instalado correctamente")
                logger.info(f"Dependencia {package} instalada exitosamente")

            except subprocess.CalledProcessError as e:
                print(f"   ‚ùå Error instalando {package}: {e}")
                logger.error(f"Fall√≥ la instalaci√≥n de {package}: {e}")
                return False

    print("‚úÖ Todas las dependencias est√°n disponibles!")
    logger.info("Verificaci√≥n de dependencias completada exitosamente")
    return True

def validate_python_version() -> bool:
    """
    Valida que la versi√≥n de Python sea compatible.

    Returns:
        bool: True si la versi√≥n es compatible, False en caso contrario.
    """
    min_python = (3, 8)
    current_python = sys.version_info[:2]

    if current_python < min_python:
        print(f"‚ùå Python {min_python[0]}.{min_python[1]}+ requerido. "
              f"Versi√≥n actual: {current_python[0]}.{current_python[1]}")
        logger.error(f"Versi√≥n de Python incompatible: {current_python}")
        return False

    print(f"‚úÖ Python {current_python[0]}.{current_python[1]} - Compatible")
    logger.info(f"Versi√≥n de Python validada: {current_python}")
    return True

def setup_environment() -> bool:
    """
    Configura el entorno de ejecuci√≥n.

    Returns:
        bool: True si el setup es exitoso, False en caso contrario.
    """
    try:
        # Verificar estructura de directorios
        required_dirs = ['gui', 'numerics']
        for dir_name in required_dirs:
            if not Path(dir_name).exists():
                logger.error(f"Directorio requerido no encontrado: {dir_name}")
                print(f"‚ùå Directorio faltante: {dir_name}")
                return False

        # Configurar paths
        sys.path.insert(0, str(Path(__file__).parent))

        # Configurar matplotlib backend
        import matplotlib
        matplotlib.use('Qt5Agg')

        logger.info("Entorno configurado correctamente")
        return True

    except Exception as e:
        logger.error(f"Error configurando entorno: {e}")
        print(f"‚ùå Error en configuraci√≥n: {e}")
        return False
